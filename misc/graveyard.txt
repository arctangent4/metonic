A graveyard of code that is not needed but could be helpful for future reference.

#ACCESS HORIZONS API DIRECTLY AND USE REGEX
# r = requests.get(main_url,params=parameters)
# if r.status_code == 200:
#     pass
# else:
#     print("An error with the API occurred.")

# content = r.text
# print(content)

# match = re.search(r"(?i)orbital\s*period\s*(?:=)?\s*(?:~)?\s*[\d.]+\s*.", content)

# if match:
#     orbital_period_text = match.group(0)
#     print(orbital_period_text)
# else:
#     print("Orbital period not found.")

        
#READ CSVs
# def return_moon_data(moon_name):

#     with open("satellites.csv","r") as file:
#         df  = pd.read_csv(file) 
#         condition = df["name"]==moon_name
#         target_line = df.loc[condition]
#         target_content = target_line.iloc[0]
        
#         if target_content["name"] == None:
#             print("""
#             The program couldn't verify the given moon name.
#             Please double check your spelling of both the moon name. Also, note
#             the program has support for 177 satellites listed in satellites.csv. \n""")
#             print("Exiting...")




#Converting to planetary calendars--Future functionality, as if we define planetary year starts at perihelion dates, this will take time.
# if calendar != "Earth":
#     for date in metonic_dates:
        
#     # conversion = convert_planetary_calendars(date)

# def convert_planetary_calendars(earth_days, target_calendar, *args):
#     planet_year_dict = {"Mercury": 87.969257, "Venus":224.70079922 ,"Earth":365.25636,"Mars": 686.98, "Jupiter":4332.589, "Saturn":10755.698, "Uranus":30685.4, "Neptune": 60189}

#     planetary_year = planet_year_dict[target_calendar]
#     return earth_days/planetary_year

